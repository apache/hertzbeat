# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The monitoring type category：service-application service monitoring db-database monitoring custom-custom monitoring os-operating system monitoring
category: bigdata
# The monitoring type eg: linux windows tomcat mysql aws...
app: hbase_master
# The monitoring i18n name
name:
  zh-CN: Apache Hbase Master
  en-US: Apache Hbase Master
# The description and help of this monitoring type
help:
  zh-CN: Hertzbeat 对 Hbase 数据库 Master 节点监控指标进行监控。<br>您可以点击 “<i>新建 Apache Hbase Master</i>” 并进行配置，或者选择“<i>更多操作</i>”，导入已有配置。
  en-US: Hertzbeat monitors the Master node monitoring indicators of the Hbase database. <br>You can click "<i>New Apache Hbase Master</i>" to configure, or select "<i>More Actions</i>" to import an existing configuration.
  zh-TW: Hertzbeat 對 Hbase 數據庫 Master 节點監控指標進行監控。<br>您可以點擊 “<i>新建 Apache Hbase Master</i>” 並進行配置，或者選擇“<i>更多操作</i>”，導入已有配置。

helpLink:
  zh-CN: https://hertzbeat.apache.org/zh-cn/docs/help/hbase_master/
  en-US: https://hertzbeat.apache.org/docs/help/hbase_master/
# Input params define for monitoring(render web ui by the definition)
params:
  # field-param field key
  - field: host
    # name-param field display i18n name
    name:
      zh-CN: 目标Host
      en-US: Target Host
    # type-param field type(most mapping the html input type)
    type: host
    # required-true or false
    required: true
  # field-param field key
  - field: port
    # name-param field display i18n name
    name:
      zh-CN: 端口
      en-US: Port
    # type-param field type(most mapping the html input type)
    type: number
    # when type is number, range is required
    range: '[0,65535]'
    # required-true or false
    required: true
    # default value
    defaultValue: 16010
  # field-param field key
  - field: timeout
    # name-param field display i18n name
    name:
      zh-CN: 查询超时时间
      en-US: Query Timeout
    # type-param field type(most mapping the html input type)
    type: number
    # required-true or false
    required: false
    # hide param-true or false
    hide: true
    # default value
    defaultValue: 6000
# collect metrics config list
metrics:
  # metrics - Server
  - name: Server
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 0
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: numRegionServers
        type: 0
        label: true
        i18n:
          zh-CN: 活跃RegionServer数量
          en-US: numRegionServers
      - field: numDeadRegionServers
        type: 0
        label: true
        i18n:
          zh-CN: 异常RegionServer数量
          en-US: numDeadRegionServers
      - field: averageLoad
        type: 0
        label: true
        i18n:
          zh-CN: 集群平均负载
          en-US: averageLoad
      - field: clusterRequests
        type: 0
        label: true
        i18n:
          zh-CN: 集群请求数量
          en-US: clusterRequests
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - $.numRegionServers
      - $.numDeadRegionServers
      - $.averageLoad
      - $.clusterRequests
    calculates:
      - numRegionServers=$.numRegionServers
      - numDeadRegionServers=$.numDeadRegionServers
      - averageLoad=$.averageLoad
      - clusterRequests=$.clusterRequests
    protocol: http
    http:
      host: ^_^host^_^
      port: ^_^port^_^
      url: /jmx
      method: GET
      ssl: ^_^ssl^_^
      parseType: jsonPath
      parseScript: '$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")]'
  - name: Rit
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 0
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: ritCount
        type: 0
        label: true
        i18n:
          zh-CN: 当前的 RIT 数量
          en-US: ritCount
      - field: ritCountOverThreshold
        type: 0
        label: true
        i18n:
          zh-CN: 超过阈值的 RIT 数量
          en-US: ritCountOverThreshold
      - field: ritOldestAge
        type: 0
        label: true
        i18n:
          zh-CN: 最老的RIT的持续时间
          en-US: ritOldestAge
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - $.ritCount
      - $.ritCountOverThreshold
      - $.ritOldestAge
    calculates:
      - ritCount=$.ritCount
      - ritCountOverThreshold=$.ritCountOverThreshold
      - ritOldestAge=$.ritOldestAge
    protocol: http
    http:
      host: ^_^host^_^
      port: ^_^port^_^
      url: /jmx
      method: GET
      ssl: ^_^ssl^_^
      parseType: jsonPath
      parseScript: '$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=AssignmentManager")]'
  - name: basic
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 0
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: liveRegionServers
        type: 1
        label: true
        i18n:
          zh-CN: 当前活跃RegionServer列表
          en-US: liveRegionServers
      - field: deadRegionServers
        type: 1
        label: true
        i18n:
          zh-CN: 当前离线RegionServer列表
          en-US: deadRegionServers
      - field: zookeeperQuorum
        type: 1
        label: true
        i18n:
          zh-CN: Zookeeper列表
          en-US: zookeeperQuorum
      - field: masterHostName
        type: 1
        label: true
        i18n:
          zh-CN: Master节点
          en-US: masterHostName
      - field: BalancerCluster_num_ops
        type: 0
        label: true
        i18n:
          zh-CN: 集群负载均衡次数
          en-US: BalancerCluster_num_ops
      - field: numActiveHandler
        type: 0
        label: true
        i18n:
          zh-CN: RPC句柄数
          en-US: numActiveHandler
      - field: receivedBytes
        type: 0
        label: true
        unit: 'MB'
        i18n:
          zh-CN: 集群接收数据量(MB)
          en-US: receivedBytes
      - field: sentBytes
        type: 0
        label: true
        unit: 'MB'
        i18n:
          zh-CN: 集群发送数据量(MB)
          en-US: sentBytes
      - field: clusterRequests
        type: 0
        label: true
        i18n:
          zh-CN: 集群总请求数量
          en-US: clusterRequests
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.liveRegionServers']
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.deadRegionServers']
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.zookeeperQuorum']
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.Hostname']
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Balancer")].BalancerCluster_num_ops
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=IPC")].numActiveHandler
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=IPC")].receivedBytes
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=IPC")].sentBytes
      - $.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].clusterRequests
    calculates:
      - liveRegionServers=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.liveRegionServers']
      - deadRegionServers=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.deadRegionServers']
      - zookeeperQuorum=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.zookeeperQuorum']
      - masterHostName=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].['tag.Hostname']
      - BalancerCluster_num_ops=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Balancer")].BalancerCluster_num_ops
      - numActiveHandler=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=IPC")].numActiveHandler
      - receivedBytes=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=IPC")].receivedBytes
      - sentBytes=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=IPC")].sentBytes
      - clusterRequests=$.beans[?(@.name == "Hadoop:service=HBase,name=Master,sub=Server")].clusterRequests
    units:
      - receivedBytes=B->MB
      - sentBytes=B->MB
    protocol: http
    http:
      host: ^_^host^_^
      port: ^_^port^_^
      url: /jmx
      method: GET
      ssl: ^_^ssl^_^
      parseType: jsonPath
      parseScript: '$'