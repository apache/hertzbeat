# Vector configuration for HertzBeat E2E testing
# Simple but functional configuration

api:
  enabled: true
  address: "0.0.0.0:8686"

sources:
  generate_syslog:
    type: "demo_logs"
    format: "syslog"
    count: 100000
    interval: 1

transforms:
  remap_syslog:
    inputs: ["generate_syslog"]
    type: "remap"
    source: |
      syslog = parse_syslog!(.message)

      severity_text = if includes(["emerg", "err", "crit", "alert"], syslog.severity) {
        "ERROR"
      } else if syslog.severity == "warning" {
        "WARN"
      } else if syslog.severity == "debug" {
        "DEBUG"
      } else if includes(["info", "notice"], syslog.severity) {
        "INFO"
      } else {
        syslog.severity
      }

      severity_number = if includes(["emerg", "err", "crit", "alert"], syslog.severity) {
        17
      } else if syslog.severity == "warning" {
        13
      } else if syslog.severity == "debug" {
        5
      } else if includes(["info", "notice"], syslog.severity) {
        9
      } else {
        9
      }

      .resourceLogs = [{
        "resource": {
          "attributes": [
            { "key": "source_type", "value": { "stringValue": .source_type } },
            { "key": "service.name", "value": { "stringValue": syslog.appname } },
            { "key": "host.hostname", "value": { "stringValue": syslog.hostname } }
          ]
        },
        "scopeLogs": [{
          "scope": {
            "name": syslog.msgid
          },
          "logRecords": [{
            "timeUnixNano": to_unix_timestamp!(syslog.timestamp, unit: "nanoseconds"),
            "body": { "stringValue": syslog.message },
            "severityText": severity_text,
            "severityNumber": severity_number,
            "attributes": [
              { "key": "syslog.procid", "value": { "stringValue": to_string(syslog.procid) } },
              { "key": "syslog.facility", "value": { "stringValue": syslog.facility } },
              { "key": "syslog.version", "value": { "stringValue": to_string(syslog.version) } }
            ]
          }]
        }]
      }]

      del(.message)
      del(.timestamp)
      del(.service)
      del(.source_type)

sinks:
  # Debug sink to log all processed data
  debug_console:
    inputs: [ "remap_syslog" ]
    type: console
    encoding:
      codec: json
  
  # Send to HertzBeat
  emit_syslog:
    inputs: [ "remap_syslog" ]
    type: opentelemetry
    protocol:
      type: http
      uri: "http://host.testcontainers.internal:${HERTZBEAT_PORT:-1157}/api/logs/ingest/otlp"
      method: post
      encoding:
        codec: json
      framing:
        method: newline_delimited
      headers:
        content-type: application/json