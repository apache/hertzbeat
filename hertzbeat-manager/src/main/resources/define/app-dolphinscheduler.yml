# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The monitoring type category：service-application service monitoring db-database monitoring custom-custom monitoring os-operating system monitoring
category: bigdata
# The monitoring type eg: linux windows tomcat mysql aws...
app: dolphinscheduler
# The monitoring i18n name
name:
  zh-CN: Apache DolphinScheduler
  en-US: Apache DolphinScheduler
  ja-JP: Apache DolphinScheduler
# The description and help of this monitoring type
help:
  zh-CN: Hertzbeat 对 Apache DolphinScheduler (支持v3.3.0或更高版本)通用指标进行测量监控。<br>您可以点击 “<i>新建 Apache DolphinScheduler</i>” 并进行配置，或者选择“<i>更多操作</i>”，导入已有配置。
  en-US: Hertzbeat measures and monitors the general metrics of Apache DolphinScheduler (support v3.3.0 or later).<br>You can click on “<i>Create New Apache DolphinScheduler</i>” to configure it, or select “<i>More Actions</i>” to import an existing configuration.
  ja-JP: Hertzbeat は Apache DolphinScheduler（v3.3.0+）の一般的なメトリクスを監視します。<br>「<i>新規 Apache DolphinScheduler</i>」をクリックしてパラメタを設定した後、新規することができます。
helpLink:
  zh-CN: https://hertzbeat.apache.org/zh-cn/docs/help/dolphinscheduler
  en-US: https://hertzbeat.apache.org/docs/help/dolphinscheduler
# Input params define for monitoring(render web ui by the definition)
params:
  # field-param field key
  - field: host
    # name-param field display i18n name
    name:
      zh-CN: 目标Host
      en-US: Target Host
      ja-JP: 目標ホスト
    # type-param field type(most mapping the html input type)
    type: host
    # required-true or false
    required: true
  # field-param field key
  - field: port
    # name-param field display i18n name
    name:
      zh-CN: 端口
      en-US: Port
      ja-JP: ポート
    # type-param field type(most mapping the html input type)
    type: number
    # when type is number, range is required
    range: '[0,65535]'
    # required-true or false
    required: true
    # default value
    defaultValue: 12345
  # field-param field key
  - field: timeout
    # name-param field display i18n name
    name:
      zh-CN: 查询超时时间
      en-US: Query Timeout
      ja-JP: クエリタイムアウト
    # type-param field type(most mapping the html input type)
    type: number
    # required-true or false
    required: false
    # hide param-true or false
    hide: true
    # default value
    defaultValue: 6000
  # field-param field key
  - field: ssl
    # name-param field display i18n name
    name:
      zh-CN: 启用HTTPS
      en-US: SSL
      ja-JP: SSL
    # type-param field type(boolean mapping the html h tag)
    type: boolean
    # required-true or false
    required: true
  - field: token
    # name-param field display i18n name
    name:
      zh-CN: 令牌
      en-US: Token
      ja-JP: トークン
    type: text
    limit: 100
    required: true

# collect metrics config list
metrics:
  - name: master
    i18n:
      zh-CN: Master
      en-US: Master
      ja-JP: マスター情報
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 0
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: host
        type: 1
        i18n:
          zh-CN: 主机地址
          en-US: Host
          ja-JP: ホスト
      - field: port
        type: 1
        i18n:
          zh-CN: 端口
          en-US: Port
          ja-JP: ポート
      - field: serverStatus
        type: 1
        i18n:
          zh-CN: 状态
          en-US: Server Status
          ja-JP: サーバーステータス
      - field: processId
        type: 1
        i18n:
          zh-CN: 进程 ID
          en-US: Process Id
          ja-JP: プロセスID
      - field: runningTime
        type: 0
        i18n:
          zh-CN: 运行时间
          en-US: Up Time
          ja-JP: アップタイム
      - field: cpuUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 处理器使用量
          en-US: CPU Usage
          ja-JP: CPU使用率
      - field: memoryUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 内存使用量
          en-US: Memory Usage
          ja-JP: メモリ使用率
      - field: diskUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 磁盘使用量
          en-US: Disk Usage
          ja-JP: ディスク使用率
      - field: jvmCpuUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: JVM CPU 使用量
          en-US: JVM CPU Usage
          ja-JP: Java仮想マシンのCPU使用率
      - field: jvmMemoryUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: JVM 内存 使用量
          en-US: JVM Memory Usage
          ja-JP: Java仮想マシンのメモリ使用率
      - field: jvmHeapUsed
        type: 0
        i18n:
          zh-CN: JVM 已使用的堆内存大小
          en-US: JVM Heap Used
          ja-JP: Java仮想マシンが使用したヒープメモリのサイズ
      - field: jvmNonHeapUsed
        type: 0
        i18n:
          zh-CN: JVM 已使用的非堆内存大小
          en-US: JVM NonHeap Used
          ja-JP: Java仮想マシンが使用したノンヒープメモリのサイズ
      - field: jvmHeapMax
        type: 0
        i18n:
          zh-CN: JVM 配置的最大堆内存大小
          en-US: JVM Heap Max
          ja-JP: Java仮想マシンのヒープメモリの最大値
      - field: jvmNonHeapMax
        type: 0
        i18n:
          zh-CN: JVM 配置的最大非堆内存大小
          en-US: JVM NonHeap Max
          ja-JP: Java仮想マシンのノンヒープメモリの最大値
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - $.heartBeatInfo
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - host=json:apply($.heartBeatInfo).host
      - port=json:apply($.heartBeatInfo).port
      - serverStatus=json:apply($.heartBeatInfo).serverStatus
      - processId=json:apply($.heartBeatInfo).processId
      - runningTime=(now()-json:apply($.heartBeatInfo).startupTime)/86400000
      - cpuUsage=json:apply($.heartBeatInfo).cpuUsage * 100
      - memoryUsage=json:apply($.heartBeatInfo).memoryUsage * 100
      - diskUsage=json:apply($.heartBeatInfo).diskUsage * 100
      - jvmCpuUsage=json:apply($.heartBeatInfo).jvmCpuUsage
      - jvmMemoryUsage=json:apply($.heartBeatInfo).jvmMemoryUsage
      - jvmHeapUsed=json:apply($.heartBeatInfo).jvmHeapUsed
      - jvmNonHeapUsed=json:apply($.heartBeatInfo).jvmNonHeapUsed
      - jvmHeapMax=json:apply($.heartBeatInfo).jvmHeapMax
      - jvmNonHeapMax=json:apply($.heartBeatInfo).jvmNonHeapMax
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: /dolphinscheduler/monitor/MASTER
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # if enabled https
      ssl: ^_^ssl^_^
      # http request header content
      headers:
        token: ^_^token^_^
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: jsonPath
      parseScript: '$.data[*]'

  - name: worker
    i18n:
      zh-CN: Worker
      en-US: Worker
      ja-JP: ワーカー情報
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 1
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: host
        type: 1
        i18n:
          zh-CN: 主机地址
          en-US: Host
          ja-JP: ホスト
      - field: port
        type: 1
        i18n:
          zh-CN: 端口
          en-US: Port
          ja-JP: ポート
      - field: serverStatus
        type: 1
        i18n:
          zh-CN: 状态
          en-US: Server Status
          ja-JP: サーバーステータス
      - field: processId
        type: 1
        i18n:
          zh-CN: 进程 ID
          en-US: Process Id
          ja-JP: プロセスID
      - field: runningTime
        type: 0
        i18n:
          zh-CN: 运行时间
          en-US: Up Time
          ja-JP: アップタイム
      - field: cpuUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 处理器使用量
          en-US: CPU Usage
          ja-JP: CPU使用率
      - field: memoryUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 内存使用量
          en-US: Memory Usage
          ja-JP: メモリ使用率
      - field: diskUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 磁盘使用量
          en-US: Disk Usage
          ja-JP: ディスク使用率
      - field: jvmCpuUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: JVM CPU 使用量
          en-US: JVM CPU Usage
          ja-JP: Java仮想マシンのCPU使用率
      - field: jvmMemoryUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: JVM 内存 使用量
          en-US: JVM Memory Usage
          ja-JP: Java仮想マシンのメモリ使用率
      - field: jvmHeapUsed
        type: 0
        i18n:
          zh-CN: JVM 已使用的堆内存大小
          en-US: JVM Heap Used
          ja-JP: Java仮想マシンが使用したヒープメモリのサイズ
      - field: jvmNonHeapUsed
        type: 0
        i18n:
          zh-CN: JVM 已使用的非堆内存大小
          en-US: JVM NonHeap Used
          ja-JP: Java仮想マシンが使用したノンヒープメモリのサイズ
      - field: jvmHeapMax
        type: 0
        i18n:
          zh-CN: JVM 配置的最大堆内存大小
          en-US: JVM Heap Max
          ja-JP: Java仮想マシンのヒープメモリの最大値
      - field: jvmNonHeapMax
        type: 0
        i18n:
          zh-CN: JVM 配置的最大非堆内存大小
          en-US: JVM NonHeap Max
          ja-JP: Java仮想マシンのノンヒープメモリの最大値
      - field: workerHostWeight
        type: 0
        i18n:
          zh-CN: 权重
          en-US: Weight
          ja-JP: ウェイト
      - field: threadPoolUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 线程池使用量
          en-US: Thread Pool Usage
          ja-JP: スレッドプールの使用率
      - field: workerGroup
        type: 1
        i18n:
          zh-CN: Worker 组
          en-US: Worker Group
          ja-JP: ワーカーグループ
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - $.heartBeatInfo
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - host=json:apply($.heartBeatInfo).host
      - port=json:apply($.heartBeatInfo).port
      - serverStatus=json:apply($.heartBeatInfo).serverStatus
      - processId=json:apply($.heartBeatInfo).processId
      - runningTime=(now()-json:apply($.heartBeatInfo).startupTime)/86400000
      - cpuUsage=json:apply($.heartBeatInfo).cpuUsage * 100
      - memoryUsage=json:apply($.heartBeatInfo).memoryUsage * 100
      - diskUsage=json:apply($.heartBeatInfo).diskUsage * 100
      - jvmCpuUsage=json:apply($.heartBeatInfo).jvmCpuUsage
      - jvmMemoryUsage=json:apply($.heartBeatInfo).jvmMemoryUsage
      - jvmHeapUsed=json:apply($.heartBeatInfo).jvmHeapUsed
      - jvmNonHeapUsed=json:apply($.heartBeatInfo).jvmNonHeapUsed
      - jvmHeapMax=json:apply($.heartBeatInfo).jvmHeapMax
      - jvmNonHeapMax=json:apply($.heartBeatInfo).jvmNonHeapMax
      - workerHostWeight=json:apply($.heartBeatInfo).workerHostWeight
      - threadPoolUsage=json:apply($.heartBeatInfo).threadPoolUsage
      - workerGroup=json:apply($.heartBeatInfo).workerGroup
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: /dolphinscheduler/monitor/WORKER
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # if enabled https
      ssl: ^_^ssl^_^
      # http request header content
      headers:
        token: ^_^token^_^
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: jsonPath
      parseScript: '$.data[*]'

  - name: alert-server
    i18n:
      zh-CN: Alert Server
      en-US: Alert Server
      ja-JP: アラートサーバーの情報
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 0
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: host
        type: 1
        i18n:
          zh-CN: 主机地址
          en-US: Host
          ja-JP: ホスト
      - field: port
        type: 1
        i18n:
          zh-CN: 端口
          en-US: Port
          ja-JP: ポート
      - field: serverStatus
        type: 1
        i18n:
          zh-CN: 状态
          en-US: Server Status
          ja-JP: サーバーステータス
      - field: processId
        type: 1
        i18n:
          zh-CN: 进程 ID
          en-US: Process Id
          ja-JP: プロセスID
      - field: runningTime
        type: 0
        i18n:
          zh-CN: 运行时间
          en-US: Up Time
          ja-JP: アップタイム
      - field: cpuUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 处理器使用量
          en-US: CPU Usage
          ja-JP: CPU使用率
      - field: memoryUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 内存使用量
          en-US: Memory Usage
          ja-JP: メモリ使用率
      - field: diskUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: 磁盘使用量
          en-US: Disk Usage
          ja-JP: ディスク使用率
      - field: jvmCpuUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: JVM CPU 使用量
          en-US: JVM CPU Usage
          ja-JP: Java仮想マシンのCPU使用率
      - field: jvmMemoryUsage
        type: 0
        unit: '%'
        i18n:
          zh-CN: JVM 内存 使用量
          en-US: JVM Memory Usage
          ja-JP: Java仮想マシンのメモリ使用率
      - field: jvmHeapUsed
        type: 0
        i18n:
          zh-CN: JVM 已使用的堆内存大小
          en-US: JVM Heap Used
          ja-JP: Java仮想マシンが使用したヒープメモリのサイズ
      - field: jvmNonHeapUsed
        type: 0
        i18n:
          zh-CN: JVM 已使用的非堆内存大小
          en-US: JVM NonHeap Used
          ja-JP: Java仮想マシンが使用したノンヒープメモリのサイズ
      - field: jvmHeapMax
        type: 0
        i18n:
          zh-CN: JVM 配置的最大堆内存大小
          en-US: JVM Heap Max
          ja-JP: Java仮想マシンのヒープメモリの最大値
      - field: jvmNonHeapMax
        type: 0
        i18n:
          zh-CN: JVM 配置的最大非堆内存大小
          en-US: JVM NonHeap Max
          ja-JP: Java仮想マシンのノンヒープメモリの最大値
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - $.heartBeatInfo
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - host=json:apply($.heartBeatInfo).host
      - port=json:apply($.heartBeatInfo).port
      - serverStatus=json:apply($.heartBeatInfo).serverStatus
      - processId=json:apply($.heartBeatInfo).processId
      - runningTime=(now()-json:apply($.heartBeatInfo).startupTime)/86400000
      - cpuUsage=json:apply($.heartBeatInfo).cpuUsage * 100
      - memoryUsage=json:apply($.heartBeatInfo).memoryUsage * 100
      - diskUsage=json:apply($.heartBeatInfo).diskUsage * 100
      - jvmCpuUsage=json:apply($.heartBeatInfo).jvmCpuUsage
      - jvmMemoryUsage=json:apply($.heartBeatInfo).jvmMemoryUsage
      - jvmHeapUsed=json:apply($.heartBeatInfo).jvmHeapUsed
      - jvmNonHeapUsed=json:apply($.heartBeatInfo).jvmNonHeapUsed
      - jvmHeapMax=json:apply($.heartBeatInfo).jvmHeapMax
      - jvmNonHeapMax=json:apply($.heartBeatInfo).jvmNonHeapMax
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: /dolphinscheduler/monitor/ALERT_SERVER
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # if enabled https
      ssl: ^_^ssl^_^
      # http request header content
      headers:
        token: ^_^token^_^
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: jsonPath
      parseScript: '$.data[*]'

  - name: database
    i18n:
      zh-CN: 数据库
      en-US: Database
      ja-JP: データベース情報
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 2
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: dbType
        type: 1
        i18n:
          zh-CN: 数据库类型
          en-US: Database Type
          ja-JP: データベースのタイプ
      - field: state
        type: 1
        i18n:
          zh-CN: 状态
          en-US: State
          ja-JP: 状態
      - field: maxConnections
        type: 0
        i18n:
          zh-CN: 最大连接数
          en-US: Max Connections
          ja-JP: 最大接続数
      - field: threadsConnections
        type: 0
        i18n:
          zh-CN: 当前连接数
          en-US: Threads Connections
          ja-JP: 現在接続数
      - field: threadsRunningConnections
        type: 0
        i18n:
          zh-CN: 当前活跃连接数
          en-US: Threads Running Connections
          ja-JP: 現在のアクティブな接続数
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - dbType
      - state
      - maxConnections
      - threadsConnections
      - threadsRunningConnections
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - dbType=dbType
      - state=state
      - maxConnections=maxConnections
      - threadsConnections=threadsConnections
      - threadsRunningConnections=threadsRunningConnections
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: /dolphinscheduler/monitor/databases
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # if enabled https
      ssl: ^_^ssl^_^
      # http request header content
      headers:
        token: ^_^token^_^
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: jsonPath
      parseScript: '$.data[0]'
