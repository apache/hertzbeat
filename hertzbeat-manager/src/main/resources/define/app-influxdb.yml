# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The monitoring type category：service-application service monitoring db-database monitoring custom-custom monitoring os-operating system monitoring
category: bigdata
# The monitoring type eg: linux windows tomcat mysql aws...
app: influxdb
# The monitoring i18n name
name:
  zh-CN: InfluxDB
  en-US: InfluxDB
  ja-JP: InfluxDB
# The description and help of this monitoring type
help:
  zh-CN: HertzBeat 对 InfluxDB 时序数据库进行监控。<br><span class='help_module_span'><a class='help_module_content' href='https://docs.influxdata.com/platform/monitoring/influxdata-platform/tools/measurements-internal'>点击查看开启步骤</a>。</span>
  en-US: HertzBeat monitors the InfluxDB time series database. <br><span class='help_module_span'><a class='help_module_content' href='https://docs.influxdata.com/platform/monitoring/influxdata-platform/tools/measurements-internal '>Click to view the activation steps</a>. </span>
  zh-TW: HertzBeat 對 InfluxDB 時序資料庫進行監控。<br><span class='help_module_span'><a class='help_module_content' href='https://docs.influxdata.com/platform/monitoring/influxdata-platform/tools/measurements-internal'>點擊查看開啓步驟</a>。</span>
  ja-JP: HertzBeat は InfluxDB 時系列データベースを監視します。<br><span class='help_module_span'><a class='help_module_content' href='https://docs.influxdata.com/platform/monitoring/influxdata-platform/tools/measurements-internal'>クリックしてガイドを見ます</a>。</span>
helpLink:
  zh-CN: https://hertzbeat.com/zh-cn/docs/help/influxdb/
  en-US: https://hertzbeat.com/docs/help/influxdb/
# Input params define for monitoring(render web ui by the definition)
params:
  # field-param field key
  - field: host
    # name-param field display i18n name
    name:
      zh-CN: 目标Host
      en-US: Target Host
      ja-JP: 目標ホスト
    # type-param field type(most mapping the html input type)
    type: host
    # required-true or false
    required: true
  - field: port
    name:
      zh-CN: 端口
      en-US: Port
      ja-JP: ポート
    # type-param field type(most mapping the html input type)
    type: number
    # when type is number, range is required
    range: '[0,65535]'
    # default value
    defaultValue: 8086
    required: true
  - field: timeout
    name:
      zh-CN: 查询超时时间
      en-US: Query Timeout
      ja-JP: クエリタイムアウト
    type: number
    required: false
    # hide param-true or false
    hide: true
    defaultValue: 6000

# collect metrics config list
metrics:
  # metrics - cluster_node_status

  - name: influxdb_info
    i18n:
      zh-CN: influxdb 基本信息
      en-US: influxdb_info
      ja-JP: influxdb基礎情報
    priority: 0
    fields:
      - field: build_date
        i18n:
          zh-CN: 创建日期
          en-US: build_date
          ja-JP: 作成日
        type: 1
        label: true
      - field: os
        i18n:
          zh-CN: 操作系统
          en-US: os
          ja-JP: オーエス
        type: 1
      - field: cpus
        i18n:
          zh-CN: cpus
          en-US: cpus
          ja-JP: 使用可能のCPUコア数
        type: 1
      - field: version
        i18n:
          zh-CN: 版本
          en-US: version
          ja-JP: バージョン
        type: 1
    aliasFields:
      - build_date
      - os
      - cpus
      - version
    calculates:
      - build_date=build_date
      - os=os
      - cpus=cpus
      - version=version
    protocol: http
    http:
      host: ^_^host^_^
      port: ^_^port^_^
      url: '/metrics'
      timeout: ^_^timeout^_^
      method: GET
      parseType: prometheus

  - name: http_api_request_duration_seconds
    i18n:
      zh-CN: http 响应时间
      en-US: http_api_request_duration_seconds
      ja-JP: http 応答時間
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 1
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: handler
        i18n:
          zh-CN: handler
          en-US: handler
          ja-JP: ハンドラ
        type: 1
      - field: path
        i18n:
          zh-CN: 路径
          en-US: path
          ja-JP: パス
        type: 1
      - field: response_code
        i18n:
          zh-CN: 返回 code
          en-US: response_code
          ja-JP: 応答コード
        type: 1
      - field: method
        i18n:
          zh-CN: 方法
          en-US: method
          ja-JP: リクエストメソッド
        type: 1
      - field: user_agent
        i18n:
          zh-CN: 用户代理
          en-US: user_agent
          ja-JP: ユーザーエージェント
        type: 1
      - field: status
        i18n:
          zh-CN: 状态
          en-US: status
          ja-JP: ステータス
        type: 1
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - handler
      - path
      - response_code
      - method
      - user_agent
      - status
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - handler=handler
      - path=path
      - response_code=response_code
      - method=method
      - user_agent=user_agent
      - status=status
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: '/metrics'
      timeout: ^_^timeout^_^
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: prometheus

  - name: storage_compactions_queued
    i18n:
      zh-CN: 正在排队的 TSM 数
      en-US: storage_compactions_queued
      ja-JP: storage_compactions_queued
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 2
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: bucket
        i18n:
          zh-CN: 存储桶
          en-US: bucket
          ja-JP: バケット
        type: 1
      - field: engine
        i18n:
          zh-CN: 引擎类型
          en-US: engine
          ja-JP: エンジン
        type: 1
      - field: id
        i18n:
          zh-CN: 标识符
          en-US: id
          ja-JP: id
        type: 1
      - field: level
        i18n:
          zh-CN: 级别
          en-US: level
          ja-JP: レベル
        type: 1
      - field: path
        i18n:
          zh-CN: 数据文件路径
          en-US: path
          ja-JP: パス
        type: 1
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - bucket
      - engine
      - id
      - level
      - path
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - bucket=bucket
      - engine=engine
      - id=id
      - level=level
      - path=path
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: '/metrics'
      timeout: ^_^timeout^_^
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: prometheus

  - name: http_write_request_bytes
    i18n:
      zh-CN: HTTP写入请求的字节数量
      en-US: http_write_request_bytes
      ja-JP: http書き込みリクエストのバイト
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 3
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: endpoint
        i18n:
          zh-CN: 终点
          en-US: endpoint
          ja-JP: エンドポイント
        type: 1
      - field: org_id
        i18n:
          zh-CN: 组织标识符
          en-US: org_id
          ja-JP: org_id
        type: 1
      - field: status
        i18n:
          zh-CN: 状态
          en-US: status
          ja-JP: ステータス
        type: 1
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - endpoint
      - org_id
      - status
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - endpoint=endpoint
      - org_id=org_id
      - status=status
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: '/metrics'
      timeout: ^_^timeout^_^
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: prometheus

  - name: qc_requests_total
    i18n:
      zh-CN: 质量控制请求总数
      en-US: qc_requests_total
      ja-JP: qcリクエスト
    # metrics scheduling priority(0->127)->(high->low), metrics with the same priority will be scheduled in parallel
    # priority 0's metrics is availability metrics, it will be scheduled first, only availability metrics collect success will the scheduling continue
    priority: 3
    # collect metrics content
    fields:
      # field-metric name, type-metric type(0-number,1-string), unit-metric unit('%','ms','MB'), label-whether it is a metrics label field
      - field: result
        i18n:
          zh-CN: 结果
          en-US: result
          ja-JP: 結果
        type: 1
      - field: org
        i18n:
          zh-CN: 组织标识符
          en-US: org
          ja-JP: org
        type: 1
    # (optional)metrics field alias name, it is used as an alias field to map and convert the collected data and metrics field
    aliasFields:
      - result
      - org
    # mapping and conversion expressions, use these and aliasField above to calculate metrics value
    # eg: cores=core1+core2, usage=usage, waitTime=allTime-runningTime
    calculates:
      - result=result
      - org=org
    # the protocol used for monitoring, eg: sql, ssh, http, telnet, wmi, snmp, sdk
    protocol: http
    # the config content when protocol is http
    http:
      # http host: ipv4 ipv6 domain
      host: ^_^host^_^
      # http port
      port: ^_^port^_^
      # http url
      url: '/metrics'
      timeout: ^_^timeout^_^
      # http method: GET POST PUT DELETE PATCH
      method: GET
      # http response data parse type: default-hertzbeat rule, jsonpath-jsonpath script, website-for website monitoring, prometheus-prometheus exporter rule
      parseType: prometheus


