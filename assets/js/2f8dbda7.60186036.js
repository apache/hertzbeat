"use strict";(self.webpackChunkhertzbeat=self.webpackChunkhertzbeat||[]).push([[44569],{15680:(e,a,t)=>{t.d(a,{xA:()=>s,yg:()=>d});var n=t(96540);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=n.createContext({}),g=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},s=function(e){var a=g(e.components);return n.createElement(p.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),y=g(t),d=l,u=y["".concat(p,".").concat(d)]||y[d]||m[d]||r;return t?n.createElement(u,i(i({ref:a},s),{},{components:t})):n.createElement(u,i({ref:a},s))}));function d(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=y;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var g=2;g<r;g++)i[g]=t[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},81995:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>g});var n=t(58168),l=(t(96540),t(15680));const r={id:"code_style_and_quality_guide",title:"Code style and quality guide",sidebar_position:3},i=void 0,o={unversionedId:"community/code_style_and_quality_guide",id:"community/code_style_and_quality_guide",title:"Code style and quality guide",description:"\x3c!--",source:"@site/docs/community/code-style-and-quality-guide.md",sourceDirName:"community",slug:"/community/code_style_and_quality_guide",permalink:"/docs/community/code_style_and_quality_guide",draft:!1,editUrl:"https://github.com/apache/hertzbeat/edit/master/home/docs/community/code-style-and-quality-guide.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"code_style_and_quality_guide",title:"Code style and quality guide",sidebar_position:3},sidebar:"docs",previous:{title:"Submit Code",permalink:"/docs/community/submit_code"},next:{title:"How to Release",permalink:"/docs/community/how_to_release"}},p={},g=[{value:"1 Pull Requests &amp; Changes Rule",id:"1-pull-requests--changes-rule",level:2},{value:"2 Code Checkstyle",id:"2-code-checkstyle",level:2},{value:"2.1 Configure Checkstyle",id:"21-configure-checkstyle",level:3},{value:"2.2 Document style check",id:"22-document-style-check",level:3},{value:"3 Programming Specification",id:"3-programming-specification",level:2},{value:"3.1 Naming Style",id:"31-naming-style",level:3},{value:"3.2 Constant Variables Definition",id:"32-constant-variables-definition",level:3},{value:"3.3 Methods Rule",id:"33-methods-rule",level:3},{value:"3.4 Collection Rule",id:"34-collection-rule",level:3},{value:"3.5 Concurrent Processing",id:"35-concurrent-processing",level:3},{value:"3.6 Control/Condition Statements",id:"36-controlcondition-statements",level:3},{value:"3.7 Code Comments Rule",id:"37-code-comments-rule",level:3},{value:"3.8 Java Lambdas",id:"38-java-lambdas",level:3},{value:"3.9 Java Streams",id:"39-java-streams",level:3},{value:"3.10 Pre-Conditions Checking",id:"310-pre-conditions-checking",level:3},{value:"3.11 StringUtils",id:"311-stringutils",level:3},{value:"3.12 <code>Enum</code> Class",id:"312-enum-class",level:3},{value:"3.13 <code>Deprecated</code> Annotation",id:"313-deprecated-annotation",level:3},{value:"4 Log",id:"4-log",level:2},{value:"5 Testing",id:"5-testing",level:2},{value:"References",id:"references",level:2}],s={toc:g};function m(e){let{components:a,...t}=e;return(0,l.yg)("wrapper",(0,n.A)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"1-pull-requests--changes-rule"},"1 Pull Requests & Changes Rule"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"ISSUE"),"/",(0,l.yg)("inlineCode",{parentName:"p"},"PR"),"(pull request) driving and naming"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"After creating a new ",(0,l.yg)("inlineCode",{parentName:"p"},"PR"),", you need to associate the existing corresponding ",(0,l.yg)("inlineCode",{parentName:"p"},"ISSUE")," at the Github Development button on the ",(0,l.yg)("inlineCode",{parentName:"p"},"PR")," page (if there is no corresponding ISSUE, it is recommended to create a new corresponding ISSUE).")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Title naming format",(0,l.yg)("br",{parentName:"p"}),"\n",(0,l.yg)("inlineCode",{parentName:"p"},"[feature/bugfix/doc/improve/refactor/bug/cleanup] title"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Description"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Please fill in the ",(0,l.yg)("inlineCode",{parentName:"li"},"PR")," template to describe the contribution. So that the reviewer can understand the problem and solution from the description, rather than just from the code."),(0,l.yg)("li",{parentName:"ul"},"Check the CheckList"))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"It's recommended that ",(0,l.yg)("inlineCode",{parentName:"p"},"PR")," should be arranged changes such as ",(0,l.yg)("inlineCode",{parentName:"p"},"cleanup"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"Refactor"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"improve"),", and ",(0,l.yg)("inlineCode",{parentName:"p"},"feature")," into separated ",(0,l.yg)("inlineCode",{parentName:"p"},"PRs"),"/",(0,l.yg)("inlineCode",{parentName:"p"},"Commits"),".")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Commit message(English, lowercase, no special characters)",(0,l.yg)("br",{parentName:"p"}),"\n","The commit of messages should follow a pattern similar to the ",(0,l.yg)("inlineCode",{parentName:"p"},"[feature/bugfix/doc/improve/refactor/bug/cleanup] title")))),(0,l.yg)("h2",{id:"2-code-checkstyle"},"2 Code Checkstyle"),(0,l.yg)("h3",{id:"21-configure-checkstyle"},"2.1 Configure Checkstyle"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Install the Checkstyle-IDEA plugin."),(0,l.yg)("li",{parentName:"ol"},"Open Checkstyle Settings. Click ",(0,l.yg)("strong",{parentName:"li"},"Settings")," \u2192 ",(0,l.yg)("strong",{parentName:"li"},"Tools")," \u2192 ",(0,l.yg)("strong",{parentName:"li"},"Checkstyle"),"."),(0,l.yg)("li",{parentName:"ol"},"Set ",(0,l.yg)("strong",{parentName:"li"},"Checkstyle version")," to ",(0,l.yg)("strong",{parentName:"li"},"10.14.2"),"."),(0,l.yg)("li",{parentName:"ol"},"Set ",(0,l.yg)("strong",{parentName:"li"},"Scan scope")," to ",(0,l.yg)("strong",{parentName:"li"},"Only Java sources (including tests)"),"."),(0,l.yg)("li",{parentName:"ol"},"Click ",(0,l.yg)("strong",{parentName:"li"},"+")," button in the ",(0,l.yg)("strong",{parentName:"li"},"Configuration")," section to open a dialog to choose the checkstyle config file.",(0,l.yg)("ol",{parentName:"li"},(0,l.yg)("li",{parentName:"ol"},"Enter a ",(0,l.yg)("strong",{parentName:"li"},"Description"),". For example, hertzbeat."),(0,l.yg)("li",{parentName:"ol"},"Select ",(0,l.yg)("strong",{parentName:"li"},"Use a local checkstyle file"),"."),(0,l.yg)("li",{parentName:"ol"},"Set ",(0,l.yg)("strong",{parentName:"li"},"File")," to ",(0,l.yg)("strong",{parentName:"li"},"script/checkstyle/checkstyle.xml"),"."),(0,l.yg)("li",{parentName:"ol"},"Select ",(0,l.yg)("strong",{parentName:"li"},"Store relative to project location"),"."),(0,l.yg)("li",{parentName:"ol"},"Click ",(0,l.yg)("strong",{parentName:"li"},"Next")," \u2192 ",(0,l.yg)("strong",{parentName:"li"},"Next")," \u2192 ",(0,l.yg)("strong",{parentName:"li"},"Finish"),"."))),(0,l.yg)("li",{parentName:"ol"},"Activate the configuration you just added by toggling the corresponding box."),(0,l.yg)("li",{parentName:"ol"},"Click ",(0,l.yg)("strong",{parentName:"li"},"OK"),".")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Backend code specification Maven plugin: ",(0,l.yg)("inlineCode",{parentName:"p"},"checkstyle"),"\nJust run ",(0,l.yg)("inlineCode",{parentName:"p"},"mvn checkstyle:checkstyle"),".")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Frontend code formatting plugin ",(0,l.yg)("inlineCode",{parentName:"p"},"eslint"),"\nJust run ",(0,l.yg)("inlineCode",{parentName:"p"},"npm run lint:fix")," in web-app"))),(0,l.yg)("h3",{id:"22-document-style-check"},"2.2 Document style check"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Install ",(0,l.yg)("inlineCode",{parentName:"li"},"markdownlint-cli2")," and run ",(0,l.yg)("inlineCode",{parentName:"li"},"npm install markdownlint-cli2 --global")),(0,l.yg)("li",{parentName:"ol"},"Run ",(0,l.yg)("inlineCode",{parentName:"li"},'markdownlint-cli2 "home/**/*.md"')," in the project to automatically detect the Markdown file format."),(0,l.yg)("li",{parentName:"ol"},"Run ",(0,l.yg)("inlineCode",{parentName:"li"},'markdownlint-cli2 --fix "home/**/*.md"')," in the project to automatically format the Markdown file format to ensure that all documents meet the specifications.")),(0,l.yg)("p",null,"Error code description:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"th"},"Error code")),(0,l.yg)("th",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"th"},"description")))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD001 heading-increment")),(0,l.yg)("td",{parentName:"tr",align:null},"Heading levels should only increment by one level at a time")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD003 heading-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Heading style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD004 ul-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Unordered list style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD005 list-indent")),(0,l.yg)("td",{parentName:"tr",align:null},"Inconsistent indentation for list items at the same level")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD007 ul-indent")),(0,l.yg)("td",{parentName:"tr",align:null},"Unordered list indentation")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD009 no-trailing-spaces")),(0,l.yg)("td",{parentName:"tr",align:null},"Trailing spaces")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD010 no-hard-tabs")),(0,l.yg)("td",{parentName:"tr",align:null},"Hard tabs")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD011 no-reversed-links")),(0,l.yg)("td",{parentName:"tr",align:null},"Reversed link syntax")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD012 no-multiple-blanks")),(0,l.yg)("td",{parentName:"tr",align:null},"Multiple consecutive blank lines")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD013 line-length")),(0,l.yg)("td",{parentName:"tr",align:null},"Line length")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD014 commands-show-output")),(0,l.yg)("td",{parentName:"tr",align:null},"Dollar signs used before commands without showing output")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD018 no-missing-space-atx")),(0,l.yg)("td",{parentName:"tr",align:null},"No space after hash on atx style heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD019 no-multiple-space-atx")),(0,l.yg)("td",{parentName:"tr",align:null},"Multiple spaces after hash on atx style heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD020 no-missing-space-closed-atx")),(0,l.yg)("td",{parentName:"tr",align:null},"No space inside hashes on closed atx style heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD021 no-multiple-space-closed-atx")),(0,l.yg)("td",{parentName:"tr",align:null},"Multiple spaces inside hashes on closed atx style heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD022 blanks-around-headings")),(0,l.yg)("td",{parentName:"tr",align:null},"Headings should be surrounded by blank lines")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD023 heading-start-left")),(0,l.yg)("td",{parentName:"tr",align:null},"Headings must start at the beginning of the line")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD024 no-duplicate-heading")),(0,l.yg)("td",{parentName:"tr",align:null},"Multiple headings with the same content")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD025 single-title/single-h1")),(0,l.yg)("td",{parentName:"tr",align:null},"Multiple top-level headings in the same document")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD026 no-trailing-punctuation")),(0,l.yg)("td",{parentName:"tr",align:null},"Trailing punctuation in heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD027 no-multiple-space-blockquote")),(0,l.yg)("td",{parentName:"tr",align:null},"Multiple spaces after blockquote symbol")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD028 no-blanks-blockquote")),(0,l.yg)("td",{parentName:"tr",align:null},"Blank line inside blockquote")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD029 ol-prefix")),(0,l.yg)("td",{parentName:"tr",align:null},"Ordered list item prefix")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD030 list-marker-space")),(0,l.yg)("td",{parentName:"tr",align:null},"Spaces after list markers")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD031 blanks-around-fences")),(0,l.yg)("td",{parentName:"tr",align:null},"Fenced code blocks should be surrounded by blank lines")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD032 blanks-around-lists")),(0,l.yg)("td",{parentName:"tr",align:null},"Lists should be surrounded by blank lines")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD033 no-inline-html")),(0,l.yg)("td",{parentName:"tr",align:null},"Inline HTML")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD034 no-bare-urls")),(0,l.yg)("td",{parentName:"tr",align:null},"Bare URL used")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD035 hr-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Horizontal rule style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD036 no-emphasis-as-heading")),(0,l.yg)("td",{parentName:"tr",align:null},"Emphasis used instead of a heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD037 no-space-in-emphasis")),(0,l.yg)("td",{parentName:"tr",align:null},"Spaces inside emphasis markers")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD038 no-space-in-code")),(0,l.yg)("td",{parentName:"tr",align:null},"Spaces inside code span elements")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD039 no-space-in-links")),(0,l.yg)("td",{parentName:"tr",align:null},"Spaces inside link text")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD040 fenced-code-language")),(0,l.yg)("td",{parentName:"tr",align:null},"Fenced code blocks should have a language specified")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD041 first-line-heading/first-line-h1")),(0,l.yg)("td",{parentName:"tr",align:null},"First line in a file should be a top-level heading")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD042 no-empty-links")),(0,l.yg)("td",{parentName:"tr",align:null},"No empty links")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD043 required-headings")),(0,l.yg)("td",{parentName:"tr",align:null},"Required heading structure")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD044 proper-names")),(0,l.yg)("td",{parentName:"tr",align:null},"Proper names should have the correct capitalization")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD045 no-alt-text")),(0,l.yg)("td",{parentName:"tr",align:null},"Images should have alternate text (alt text)")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD046 code-block-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Code block style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD047 single-trailing-newline")),(0,l.yg)("td",{parentName:"tr",align:null},"Files should end with a single newline character")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD048 code-fence-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Code fence style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD049 emphasis-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Emphasis style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD050 strong-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Strong style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD051 link-fragments")),(0,l.yg)("td",{parentName:"tr",align:null},"Link fragments should be valid")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD052 reference-links-images")),(0,l.yg)("td",{parentName:"tr",align:null},"Reference links and images should use a label that is defined")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD053 link-image-reference-definitions")),(0,l.yg)("td",{parentName:"tr",align:null},"Link and image reference definitions should be needed")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD054 link-image-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Link and image style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD055 table-pipe-style")),(0,l.yg)("td",{parentName:"tr",align:null},"Table pipe style")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("strong",{parentName:"td"},"MD056 table-column-count")),(0,l.yg)("td",{parentName:"tr",align:null},"Table column count")))),(0,l.yg)("h2",{id:"3-programming-specification"},"3 Programming Specification"),(0,l.yg)("h3",{id:"31-naming-style"},"3.1 Naming Style"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Prioritize selecting nouns for variable naming, it's easier to distinguish between ",(0,l.yg)("inlineCode",{parentName:"p"},"variables")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"methods"),"."),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"Cache<String> publicKeyCache;\n"))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Pinyin abbreviations are prohibited for variables (excluding nouns such as place names), such as chengdu.")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"It is recommended to end variable names with a ",(0,l.yg)("inlineCode",{parentName:"p"},"type"),".",(0,l.yg)("br",{parentName:"p"}),"\n","For variables of type ",(0,l.yg)("inlineCode",{parentName:"p"},"Collection/List"),", take ",(0,l.yg)("inlineCode",{parentName:"p"},"xxxx")," (plural representing multiple elements) or end with ",(0,l.yg)("inlineCode",{parentName:"p"},"xxxList")," (specific type).",(0,l.yg)("br",{parentName:"p"}),"\n","For variables of type ",(0,l.yg)("inlineCode",{parentName:"p"},"map"),", describe the ",(0,l.yg)("inlineCode",{parentName:"p"},"key")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"value")," clearly:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"Map<Long, User> idUserMap;\nMap<Long, String> userIdNameMap;\n"))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"That can intuitively know the type and meaning of the variable through its name.",(0,l.yg)("br",{parentName:"p"}),"\n","Method names should start with a verb first as follows:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"void computeVcores(Object parameter1);\n")),(0,l.yg)("blockquote",{parentName:"li"},(0,l.yg)("p",{parentName:"blockquote"},"Note: It is not necessary to strictly follow this rule in the ",(0,l.yg)("inlineCode",{parentName:"p"},"Builder")," tool class.")))),(0,l.yg)("h3",{id:"32-constant-variables-definition"},"3.2 Constant Variables Definition"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Redundant strings should be extracted as constants"),(0,l.yg)("blockquote",{parentName:"li"},(0,l.yg)("p",{parentName:"blockquote"},"If a constant has been hardcoded twice or more times, please directly extract it as a constant and change the corresponding reference.\nIn generally, constants in ",(0,l.yg)("inlineCode",{parentName:"p"},"log")," can be ignored to extract.")),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'public static RestResponse success(Object data) {\n    RestResponse resp = new RestResponse();\n    resp.put("status", "success");\n    resp.put("code", ResponseCode.CODE_SUCCESS);\n    resp.put("data", data);\n    return resp;\n}\n\npublic static RestResponse error() {\n    RestResponse resp = new RestResponse();\n    resp.put("status", "error");\n    resp.put("code", ResponseCode.CODE_FAIL);\n    resp.put("data", null);\n    return resp;\n}\n'))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("blockquote",{parentName:"li"},(0,l.yg)("p",{parentName:"blockquote"},"Strings are extracted as constant references.")),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'  public static final String STATUS = "status";\n  public static final String CODE = "code";\n  public static final String DATA = "data";\n\n  public static RestResponse success(Object data) {\n      RestResponse resp = new RestResponse();\n      resp.put(STATUS, "success");\n      resp.put(CODE, ResponseCode.CODE_SUCCESS);\n      resp.put(DATA, data);\n      return resp;\n  }\n\n  public static RestResponse error() {\n      RestResponse resp = new RestResponse();\n      resp.put(STATUS, "error");\n      resp.put(CODE, ResponseCode.CODE_FAIL);\n      resp.put(DATA, null);\n      return resp;\n  }\n'))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Ensure code readability and intuitiveness"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"The string in the ",(0,l.yg)("inlineCode",{parentName:"p"},"annotation")," symbol doesn't need to be extracted as constant.")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"The referenced ",(0,l.yg)("inlineCode",{parentName:"p"},"package")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"resource")," name doesn't need to be extracted as constant.")))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Variables that have not been reassigned must also be declared as ",(0,l.yg)("mark",null," final ")," types.")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"About the arrangement order of ",(0,l.yg)("inlineCode",{parentName:"p"},"constant/variable")," lines"),(0,l.yg)("p",{parentName:"li"},"Sort the variable lines in the class in the order of"),(0,l.yg)("ol",{parentName:"li"},(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("inlineCode",{parentName:"li"},"public static final V"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"static final V"),",",(0,l.yg)("inlineCode",{parentName:"li"},"protected static final V"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"private static final V")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("inlineCode",{parentName:"li"},"public static v"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"static v"),",",(0,l.yg)("inlineCode",{parentName:"li"},"protected static v"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"private static v")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("inlineCode",{parentName:"li"},"public v"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"v"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"protected v"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"private v"))))),(0,l.yg)("h3",{id:"33-methods-rule"},"3.3 Methods Rule"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Sort the methods in the class in the order of ",(0,l.yg)("inlineCode",{parentName:"p"},"public"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"protected"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"private")),(0,l.yg)("p",{parentName:"li"},"Static methods of a class can be placed after non-static methods and sorted according to consistent method visibility.")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"When there are restrictions on the method, the parameters and returned values of the method need to be annotated with ",(0,l.yg)("inlineCode",{parentName:"p"},"@Nonnull")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"@Nullable")," annotations and constraints."),(0,l.yg)("p",{parentName:"li"},"For example, if the parameter cannot be null, it is best to add a ",(0,l.yg)("inlineCode",{parentName:"p"},"@Nonnull")," annotation. If the returned value can be null, the ",(0,l.yg)("inlineCode",{parentName:"p"},"@Nullable")," annotation should be added first."),(0,l.yg)("mark",null," Note: that the package name is ",(0,l.yg)("b",null,"javax.validation.requirements")," ")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"If there are too many lines of code in the method, please have a try on using multiple sub methods at appropriate points to segment the method body."),(0,l.yg)("p",{parentName:"li"},"Generally speaking, it needs to adhere to the following principles:"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Convenient testing"),(0,l.yg)("li",{parentName:"ul"},"Good semantics"),(0,l.yg)("li",{parentName:"ul"},"Easy to read")),(0,l.yg)("p",{parentName:"li"},"In addition, it is also necessary to consider whether the splitting is reasonable in terms of components, logic, abstraction, and other aspects in the scenario."),(0,l.yg)("blockquote",{parentName:"li"},(0,l.yg)("p",{parentName:"blockquote"},"However, there is currently no clear definition of demo. During the evolution process, we will provide additional examples for developers to have a clearer reference and understanding.")))),(0,l.yg)("h3",{id:"34-collection-rule"},"3.4 Collection Rule"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"For ",(0,l.yg)("inlineCode",{parentName:"p"},"collection")," returned values, unless there are special ",(0,l.yg)("inlineCode",{parentName:"p"},"concurrent")," (such as thread safety), always return the ",(0,l.yg)("inlineCode",{parentName:"p"},"interface"),", such as:"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"returns ",(0,l.yg)("mark",null," List ")," if use ",(0,l.yg)("inlineCode",{parentName:"li"},"ArrayList")),(0,l.yg)("li",{parentName:"ul"},"returns ",(0,l.yg)("mark",null," Map ")," if use ",(0,l.yg)("inlineCode",{parentName:"li"},"HashMap")),(0,l.yg)("li",{parentName:"ul"},"returns ",(0,l.yg)("mark",null," Set ")," if use ",(0,l.yg)("inlineCode",{parentName:"li"},"HashSet")))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"If there are multiple threads, the following declaration or returned types can be used:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"private CurrentHashMap map;\npublic CurrentHashMap funName();\n"))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"isEmpty()")," instead of ",(0,l.yg)("inlineCode",{parentName:"p"},"length() == 0")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"size() == 0")),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo\uff1a"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (pathPart.length() == 0) {\n   return;\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo\uff1a"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (pathPart.isEmpty()) {\n   return;\n}\n")))))),(0,l.yg)("h3",{id:"35-concurrent-processing"},"3.5 Concurrent Processing"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"The ",(0,l.yg)("inlineCode",{parentName:"p"},"thread pool")," needs to be managed, using a unified entry point to obtain the ",(0,l.yg)("inlineCode",{parentName:"p"},"thread pool"),"."),(0,l.yg)("mark",null," Note: During the evolution process, we will provide additional examples for developers to have a clearer reference and understanding. ")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"Thread pool")," needs to be resource constrained to prevent resource leakage caused by improper handling"))),(0,l.yg)("h3",{id:"36-controlcondition-statements"},"3.6 Control/Condition Statements"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Avoid unreasonable ",(0,l.yg)("inlineCode",{parentName:"li"},"condition/control")," branches order leads to:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Multiple code line ",(0,l.yg)("inlineCode",{parentName:"li"},"depths")," of ",(0,l.yg)("inlineCode",{parentName:"li"},"n+1")),(0,l.yg)("li",{parentName:"ul"},"Redundant lines")))),(0,l.yg)("p",null,"Generally speaking, if a method's code line depth exceeds ",(0,l.yg)("inlineCode",{parentName:"p"},"2+ Tabs")," due to continuous nested ",(0,l.yg)("inlineCode",{parentName:"p"},"if... else.."),", it should be considered to try"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"merging branches"),","),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"inverting branch conditions")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"extracting private methods"))),(0,l.yg)("p",null,"to reduce code line depth and improve readability like follows:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Union or merge the logic into the next level calling"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (isInsert) {\n    save(platform);\n} else {\n    updateById(platform);\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"saveOrUpdate(platform);\n"))))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Merge the conditions"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (expression1) {\n    if (expression2) {\n    ......\n    }\n}\n\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (expression1 && expression2) {\n......\n}\n"))))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Reverse the condition"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"public void doSomething() {\n    // Ignored more deeper block lines\n    // .....\n    if (condition1) {\n        // ...\n    } else {\n        // ...\n    }\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"public void doSomething() {\n    // Ignored more deeper block lines\n    // .....\n    if (!condition1) {\n        // ...\n        return;\n    }\n    // ...\n}\n"))))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Using a single variable or method to reduce the complex conditional expression"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'if (dbType.indexOf("sqlserver") >= 0 || dbType.indexOf("sql server") >= 0) {\n    // ...\n}\n'))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (containsSqlServer(dbType)) {\n    // ....\n}\n//.....\n// definition of the containsSqlServer\n")))))),(0,l.yg)("blockquote",null,(0,l.yg)("p",{parentName:"blockquote"},"Using ",(0,l.yg)("inlineCode",{parentName:"p"},"sonarlint")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"better highlights")," to check code depth looks like good in the future.")),(0,l.yg)("h3",{id:"37-code-comments-rule"},"3.7 Code Comments Rule"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Method lacks comments:"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"When"),": When can the method be called"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"How"),": How to use this method and how to pass parameters, etc."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"What"),": What functions does this method achieve"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"Note"),": What should developers pay attention to when calling this method"))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Missing necessary class header description comments."),(0,l.yg)("p",{parentName:"li"},"Add ",(0,l.yg)("inlineCode",{parentName:"p"},"What"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"Note"),", etc. like mentioned in the ",(0,l.yg)("inlineCode",{parentName:"p"},"1"),".")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"The method declaration in the interface must be annotated."),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"If the semantics of the implementation and the annotation content at the interface declaration are inconsistent, the specific implementation method also needs to be rewritten with annotations.")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"If the semantics of the method implementation are consistent with the annotation content at the interface declaration, it is not recommended to write annotations to avoid duplicate annotations.")))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"The first word in the comment lines need to be capitalized, like ",(0,l.yg)("inlineCode",{parentName:"p"},"param")," lines, ",(0,l.yg)("inlineCode",{parentName:"p"},"return")," lines.\nIf a special reference as a subject does not need to be capitalized, special symbols such as quotation marks need to be noted."))),(0,l.yg)("h3",{id:"38-java-lambdas"},"3.8 Java Lambdas"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Prefer ",(0,l.yg)("inlineCode",{parentName:"p"},"non-capturing")," lambdas (lambdas that do not contain references to the outer scope).\nCapturing lambdas need to create a new object instance for every call. ",(0,l.yg)("inlineCode",{parentName:"p"},"Non-capturing")," lambdas can use the same instance for each invocation."),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"map.computeIfAbsent(key, x -> key.toLowerCase())\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"map.computeIfAbsent(key, k -> k.toLowerCase());\n"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Consider method references instead of inline lambdas"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"map.computeIfAbsent(key, k-> Loader.load(k));\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"map.computeIfAbsent(key, Loader::load);\n")))))),(0,l.yg)("h3",{id:"39-java-streams"},"3.9 Java Streams"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Avoid Java Streams in any performance critical code.")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"The main motivation to use Java Streams would be to improve code readability. As such, they can be a good match in parts of the code that are not data-intensive, but deal with coordination.")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Even in the latter case, try to limit the scope to a method, or a few private methods within an internal class."))),(0,l.yg)("h3",{id:"310-pre-conditions-checking"},"3.10 Pre-Conditions Checking"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Use a unified ",(0,l.yg)("inlineCode",{parentName:"li"},"Utils.requireXXX")," to complete the validation of the prerequisite, and if possible, replace the ",(0,l.yg)("inlineCode",{parentName:"li"},"AlertXXException.throwIfXXX")," by new pre-conditions checking.")),(0,l.yg)("h3",{id:"311-stringutils"},"3.11 StringUtils"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"StringUtils.isBlank")," instead of ",(0,l.yg)("inlineCode",{parentName:"p"},"StringUtils.isEmpty")),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (StringUtils.isEmpty(name)) {\n   return;\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (StringUtils.isBlank(name)) {\n   return;\n}\n"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"StringUtils.isNotBlank")," instead of ",(0,l.yg)("inlineCode",{parentName:"p"},"StringUtils.isNotEmpty")),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (StringUtils.isNotEmpty(name)) {\n   return;\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (StringUtils.isNotBlank(name)) {\n   return;\n}\n"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"StringUtils.isAllBlank")," instead of ",(0,l.yg)("inlineCode",{parentName:"p"},"StringUtils.isAllEmpty")),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (StringUtils.isAllEmpty(name, age)) {\n   return;\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (StringUtils.isAllBlank(name, age)) {\n   return;\n}\n")))))),(0,l.yg)("h3",{id:"312-enum-class"},"3.12 ",(0,l.yg)("inlineCode",{parentName:"h3"},"Enum")," Class"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Enumeration value comparison"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (status.equals(JobStatus.RUNNING)) {\n   return;\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"if (status == JobStatus.RUNNING) {\n   return;\n}\n"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Enumeration classes do not need to implement Serializable"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"public enum JobStatus implements Serializable {\n   // ...\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"public enum JobStatus {\n   // ...\n}\n"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"Enum.name()")," instead of ",(0,l.yg)("inlineCode",{parentName:"p"},"Enum.toString()")),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"System.out.println(JobStatus.RUNNING.toString());\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"System.out.println(JobStatus.RUNNING.name());\n"))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Enumeration class names uniformly use the Enum suffix"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"public enum JobStatus {\n   // ...\n}\n"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},"public enum JobStatusEnum {\n   // ...\n}\n")))))),(0,l.yg)("h3",{id:"313-deprecated-annotation"},"3.13 ",(0,l.yg)("inlineCode",{parentName:"h3"},"Deprecated")," Annotation"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Negative demo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"@deprecated\npublic void process(String input) {\n    // ...\n}\n")),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Positive demo:")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-java"},"@Deprecated\npublic void process(String input) {\n    // ...\n}\n")),(0,l.yg)("h2",{id:"4-log"},"4 Log"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"placeholders")," for log output:"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'log.info("Deploy cluster request " + deployRequest);\n'))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'log.info("load plugin:{} to {}", file.getName(), appPlugins);\n'))))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Pay attention to the selection of ",(0,l.yg)("inlineCode",{parentName:"p"},"log level")," when printing logs"),(0,l.yg)("p",{parentName:"li"}," When printing the log content, if the actual parameters of the log placeholder are passed, it is necessary to avoid premature evaluation to avoid unnecessary evaluation caused by the log level."),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Negative demo:"),(0,l.yg)("p",{parentName:"li"},"Assuming the current log level is ",(0,l.yg)("inlineCode",{parentName:"p"},"INFO"),":"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'// ignored declaration lines.\nList<User> userList = getUsersByBatch(1000);\nLOG.debug("All users: {}", getAllUserIds(userList));\n'))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Positive demo:"),(0,l.yg)("p",{parentName:"li"},"In this case, we should determine the log level in advance before making actual log calls as follows:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-java"},'// ignored declaration lines.\nList<User> userList = getUsersByBatch(1000);\nif (LOG.isDebugEnabled()) {\n  LOG.debug("All ids of users: {}", getAllIDsOfUsers(userList)); \n}\n')))))),(0,l.yg)("h2",{id:"5-testing"},"5 Testing"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"It's recommended to use ",(0,l.yg)("inlineCode",{parentName:"p"},"JUnit5")," to develop test case preparation")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"The implemented interface needs to write the ",(0,l.yg)("inlineCode",{parentName:"p"},"e2e")," test case script under the ",(0,l.yg)("inlineCode",{parentName:"p"},"e2e")," module."))),(0,l.yg)("h2",{id:"references"},"References"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://site.mockito.org/"},"https://site.mockito.org/")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://alibaba.github.io/p3c/"},"https://alibaba.github.io/p3c/")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://rules.sonarsource.com/java/"},"https://rules.sonarsource.com/java/")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://junit.org/junit5/"},"https://junit.org/junit5/")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("a",{parentName:"li",href:"https://streampark.apache.org/"},"https://streampark.apache.org/"))))}m.isMDXComponent=!0}}]);