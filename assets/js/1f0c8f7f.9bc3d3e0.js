"use strict";(self.webpackChunkhertzbeat=self.webpackChunkhertzbeat||[]).push([[70360],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>c});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,g=d["".concat(s,".").concat(c)]||d[c]||p[c]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91661:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(58168),a=(n(96540),n(15680));const o={id:"extend-ngql",title:"NGQL Custom Monitoring",sidebar_label:"NGQL Custom Monitoring"},i=void 0,l={unversionedId:"advanced/extend-ngql",id:"advanced/extend-ngql",title:"NGQL Custom Monitoring",description:"From Custom Monitoring, you are familiar with how to customize types, Metrics, protocols, etc. Here we will introduce in detail how to use JDBC(support mysql,mariadb,postgresql,sqlserver at present) to customize Metric monitoring.",source:"@site/docs/advanced/extend-ngql.md",sourceDirName:"advanced",slug:"/advanced/extend-ngql",permalink:"/docs/advanced/extend-ngql",draft:!1,editUrl:"https://github.com/apache/hertzbeat/edit/master/home/docs/advanced/extend-ngql.md",tags:[],version:"current",frontMatter:{id:"extend-ngql",title:"NGQL Custom Monitoring",sidebar_label:"NGQL Custom Monitoring"},sidebar:"docs",previous:{title:"SNMP Protocol Custom Monitoring",permalink:"/docs/advanced/extend-snmp"},next:{title:"Monitoring Template",permalink:"/docs/template"}},s={},m=[{value:"Data Parsing Methods",id:"data-parsing-methods",level:3},{value:"<strong>filterCount</strong>",id:"filtercount",level:4},{value:"<strong>oneRow</strong>",id:"onerow",level:4},{value:"<strong>multiRow</strong>",id:"multirow",level:4},{value:"<strong>columns</strong>",id:"columns",level:4},{value:"Customization Steps",id:"customization-steps",level:3},{value:"Monitoring Template YML",id:"monitoring-template-yml",level:3}],u={toc:m};function p(e){let{components:t,...o}=e;return(0,a.yg)("wrapper",(0,r.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"From ",(0,a.yg)("a",{parentName:"p",href:"extend-point"},"Custom Monitoring"),", you are familiar with how to customize types, Metrics, protocols, etc. Here we will introduce in detail how to use JDBC(support mysql,mariadb,postgresql,sqlserver at present) to customize Metric monitoring.\nNGQL custom monitoring allows us to easily query metric data from the NebulaGraph graph database using NGQL or OpenCypher, supporting NebulaGraph 3.X versions.")),(0,a.yg)("h3",{id:"data-parsing-methods"},"Data Parsing Methods"),(0,a.yg)("p",null,"Mapping the fields returned by NGQL queries to the metrics we need allows us to obtain corresponding metric data. Currently, there are four mapping and parsing methods: filterCount, oneRow, multiRow, columns."),(0,a.yg)("h4",{id:"filtercount"},(0,a.yg)("strong",{parentName:"h4"},"filterCount")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Counts the number of results returned by a query based on specified fields, usually used in ",(0,a.yg)("inlineCode",{parentName:"p"},"SHOW ...")," statements. If NGQL statements can directly return the count, it is recommended to use NGQL statements for counting.",(0,a.yg)("br",{parentName:"p"}),"\n","Syntax for the ",(0,a.yg)("inlineCode",{parentName:"p"},"commands")," field: aliasField#NGQL#filterName#filterValue",(0,a.yg)("br",{parentName:"p"}),"\n",(0,a.yg)("inlineCode",{parentName:"p"},"aliasField"),": corresponds to the value in the ",(0,a.yg)("inlineCode",{parentName:"p"},"aliasFields")," in the monitoring template",(0,a.yg)("br",{parentName:"p"}),"\n",(0,a.yg)("inlineCode",{parentName:"p"},"NGQL"),": query statement",(0,a.yg)("br",{parentName:"p"}),"\n",(0,a.yg)("inlineCode",{parentName:"p"},"filterName"),": filter attribute name (optional)",(0,a.yg)("br",{parentName:"p"}),"\n",(0,a.yg)("inlineCode",{parentName:"p"},"filterValue"),": filter attribute value (optional)")),(0,a.yg)("p",null,"For example:  "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"online_meta_count#SHOW HOSTS META#Status#ONLINE",(0,a.yg)("br",{parentName:"li"}),"Counts the number of rows returned by ",(0,a.yg)("inlineCode",{parentName:"li"},"SHOW HOSTS META")," where Status equals ONLINE."),(0,a.yg)("li",{parentName:"ul"},"online_meta_count#SHOW HOSTS META##",(0,a.yg)("br",{parentName:"li"}),"Counts the number of rows returned by ",(0,a.yg)("inlineCode",{parentName:"li"},"SHOW HOSTS META"),".")),(0,a.yg)("h4",{id:"onerow"},(0,a.yg)("strong",{parentName:"h4"},"oneRow")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Queries a single row of data by mapping the column names of the query result set to the queried fields.")),(0,a.yg)("p",null,"For example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Metrics fields: a, b"),(0,a.yg)("li",{parentName:"ul"},"NGQL query: match (v:metrics) return v.metrics.a as a, v.metrics.b as b;")),(0,a.yg)("p",null,"Here, the metric fields can be mapped to the response data row by row."),(0,a.yg)("p",null,"Notes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When using the ",(0,a.yg)("inlineCode",{parentName:"li"},"oneRow")," method, if a single query statement returns multiple rows of results, only the first row of results will be mapped to the metric fields."),(0,a.yg)("li",{parentName:"ul"},"When the ",(0,a.yg)("inlineCode",{parentName:"li"},"commands")," field contains two or more query statements and the returned fields of multiple query statements are the same, the fields returned by the subsequent statement will overwrite those returned by the previous statement."),(0,a.yg)("li",{parentName:"ul"},"It is recommended to use the limit statement to limit the number of rows returned in the result set when defining ",(0,a.yg)("inlineCode",{parentName:"li"},"commands"),".")),(0,a.yg)("h4",{id:"multirow"},(0,a.yg)("strong",{parentName:"h4"},"multiRow")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Queries multiple rows of data by mapping the column names of the query result set to the queried fields.")),(0,a.yg)("p",null,"For example:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Metrics fields: a, b"),(0,a.yg)("li",{parentName:"ul"},"NGQL query: match (v:metrics) return v.metrics.a as a, v.metrics.b as b;")),(0,a.yg)("p",null,"Here, the metric fields can be mapped to the response data row by row.\nNotes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When using the ",(0,a.yg)("inlineCode",{parentName:"li"},"multiRow")," method, the ",(0,a.yg)("inlineCode",{parentName:"li"},"commands")," field can only contain one query statement.")),(0,a.yg)("h4",{id:"columns"},(0,a.yg)("strong",{parentName:"h4"},"columns")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"Collects a single row of metric data by mapping two columns of data (key-value), where the key matches the queried fields and the value is the value of the queried field.")),(0,a.yg)("p",null,"Notes:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"When using the ",(0,a.yg)("inlineCode",{parentName:"li"},"columns")," method, the first two columns of the result set are mapped to collect data by default, where the first column corresponds to the metric name and the second column corresponds to the metric value."),(0,a.yg)("li",{parentName:"ul"},"When the ",(0,a.yg)("inlineCode",{parentName:"li"},"commands")," field contains two or more query statements and the first column of data returned by multiple query statements is duplicated, the result of the last statement will be retained.")),(0,a.yg)("h3",{id:"customization-steps"},"Customization Steps"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"HertzBeat Page")," -> ",(0,a.yg)("strong",{parentName:"p"},"Monitoring Template Menu")," -> ",(0,a.yg)("strong",{parentName:"p"},"Add Monitoring Type")," -> ",(0,a.yg)("strong",{parentName:"p"},"Configure Custom Monitoring Template YML")," -> ",(0,a.yg)("strong",{parentName:"p"},"Click Save Application")," -> ",(0,a.yg)("strong",{parentName:"p"},"Use the New Monitoring Type to Add Monitoring")),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"HertzBeat Page",src:n(35008).A,width:"4064",height:"2166"})),(0,a.yg)("hr",null),(0,a.yg)("p",null,"Configuration usages of the monitoring templates yml are detailed below."),(0,a.yg)("h3",{id:"monitoring-template-yml"},"Monitoring Template YML"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"We define all monitoring collection types (mysql,jvm,k8s) as yml monitoring templates, and users can import these templates to support corresponding types of monitoring.",(0,a.yg)("br",{parentName:"p"}),"\n","Monitoring template is used to define the name of monitoring type(international), request parameter mapping, index information, collection protocol configuration information, etc.")),(0,a.yg)("p",null,"eg: Customize a monitoring type named example_ngql, which collects metric data using NGQL."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"# Monitoring category: service-application service program-application program db-database custom-custom os-operating system bigdata-big data mid-middleware webserver-web server cache-cache cn-cloud native network-network monitoring, etc.\ncategory: db\n# Monitoring application type (consistent with the file name) eg: linux windows tomcat mysql aws...\napp: example_ngql\nname:\n  zh-CN: NGQL Custom Monitoring Application\n  en-US: NGQL Custom APP\n# Monitoring parameter definition. These are input parameter variables, which can be written in the format of ^_^host^_^ to be replaced by system variable values in the later configuration\n# This part is usually not modified\nparams:\n  # field-param field key\n  - field: host\n    name:\n      zh-CN: Target Host\n      en-US: Target Host\n    type: host\n    required: true\n  - field: graphPort\n    name:\n      zh-CN: Graph Port\n      en-US: Graph Port\n    type: number\n    range: '[0,65535]'\n    required: true\n    defaultValue: 9669\n  - field: username\n    name:\n      zh-CN: Username\n      en-US: Username\n    type: text\n    required: true\n  - field: password\n    name:\n      zh-CN: Password\n      en-US: Password\n    type: password\n    required: true\n  - field: spaceName\n    name:\n      zh-CN: Space Name\n      en-US: Space Name\n    type: text\n    required: false\n  - field: timeout\n    name:\n      zh-CN: Connect Timeout(ms)\n      en-US: Connect Timeout(ms)\n    type: number\n    unit: ms\n    range: '[0,100000]'\n    required: true\n    defaultValue: 6000\n# Metric collection configuration list\nmetrics:\n  - name: base_info\n    i18n:\n      zh-CN: Vertex statistics\n      en-US: Vertex statistics\n    priority: 0\n    fields:\n      - field: tag1\n        type: 1\n        i18n:\n          zh-CN: tag1\n          en-US: tag1\n      - field: tag1\n        type: 1\n        i18n:\n          zh-CN: tag2\n          en-US: tag2\n    aliasFields:\n      - tag1\n      - tag2\n    protocol: ngql\n    ngql:\n      host: ^_^host^_^\n      username: ^_^username^_^\n      password: ^_^password^_^\n      port: ^_^graphPort^_^\n      spaceName: ^_^spaceName^_^\n      parseType: columns\n      # Define the query statements used to collect data\n      commands:\n        - match (v:tag1) return \"tag1\" as name ,count(v) as cnt \n        - match (v:tag2) return \"tag2\" as name ,count(v) as cnt\n      timeout: ^_^timeout^_^\n")))}p.isMDXComponent=!0},35008:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/extend-point-1-0175fbb6d4bd1105c2596f7ccae83938.png"}}]);