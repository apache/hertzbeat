"use strict";(self.webpackChunkhertzbeat=self.webpackChunkhertzbeat||[]).push([[46110],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),g=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=g(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=g(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var g=2;g<o;g++)i[g]=n[g];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},95214:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>g});var r=n(58168),a=(n(96540),n(15680));const o={id:"log_integration",title:"Log Integration",sidebar_label:"Log Integration",keywords:["open source monitoring","log integration","log management","multi-source logs"]},i=void 0,l={unversionedId:"help/log_integration",id:"help/log_integration",title:"Log Integration",description:'HertzBeat\'s log integration module aims to achieve unified reception, standardized processing of log data from different third-party log systems and observability platforms. As a centralized "log center", HertzBeat can efficiently integrate log information from external systems and provide real-time log monitoring and analysis capabilities.',source:"@site/docs/help/log_integration.md",sourceDirName:"help",slug:"/help/log_integration",permalink:"/docs/help/log_integration",draft:!1,editUrl:"https://github.com/apache/hertzbeat/edit/master/home/docs/help/log_integration.md",tags:[],version:"current",frontMatter:{id:"log_integration",title:"Log Integration",sidebar_label:"Log Integration",keywords:["open source monitoring","log integration","log management","multi-source logs"]},sidebar:"docs",previous:{title:"TDengine Monitoring Practice",permalink:"/docs/start/usecase/tdengine-practice"},next:{title:"Log Stream",permalink:"/docs/help/log_stream"}},s={},g=[{value:"Core Capabilities",id:"core-capabilities",level:3},{value:"Supported Log Sources",id:"supported-log-sources",level:3},{value:"OpenTelemetry OTLP Protocol Integration",id:"opentelemetry-otlp-protocol-integration",level:2},{value:"API Endpoints",id:"api-endpoints",level:3},{value:"Request Configuration",id:"request-configuration",level:3},{value:"Request Headers",id:"request-headers",level:4},{value:"Request Body Format",id:"request-body-format",level:4},{value:"Configuration Examples",id:"configuration-examples",level:3},{value:"OpenTelemetry Collector Configuration",id:"opentelemetry-collector-configuration",level:4},{value:"Log Data Format Description",id:"log-data-format-description",level:3},{value:"Core Fields",id:"core-fields",level:4},{value:"Resource Attributes",id:"resource-attributes",level:4},{value:"Configuration Verification",id:"configuration-verification",level:3},{value:"Common Issues",id:"common-issues",level:3},{value:"Log Sending Failed",id:"log-sending-failed",level:4},{value:"Log Format Error",id:"log-format-error",level:4},{value:"Related Resources",id:"related-resources",level:3}],p={toc:g};function u(e){let{components:t,...o}=e;return(0,a.yg)("wrapper",(0,r.A)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},'HertzBeat\'s log integration module aims to achieve unified reception, standardized processing of log data from different third-party log systems and observability platforms. As a centralized "log center", HertzBeat can efficiently integrate log information from external systems and provide real-time log monitoring and analysis capabilities.')),(0,a.yg)("h3",{id:"core-capabilities"},"Core Capabilities"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Multi-source Log Integration"),": Support receiving log data from mainstream platforms such as OpenTelemetry, Filebeat, Vector, Loki"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Log Format Standardization"),": Convert log data from different platforms to HertzBeat's internal unified format for subsequent processing and analysis"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Real-time Log Processing"),": Provide real-time log stream processing capabilities, supporting instant storage and distribution of log data"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Intelligent Log Analysis"),": Provide log search, filtering and other analysis functions")),(0,a.yg)("h3",{id:"supported-log-sources"},"Supported Log Sources"),(0,a.yg)("p",null,"HertzBeat currently supports data integration from the following third-party log platforms:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"OTLP"),": Support standard OpenTelemetry Log Protocol (OTLP) HTTP/JSON format, can directly receive log data from OpenTelemetry Collector and various applications that support OTLP."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"More Protocol Support"),": HertzBeat is actively expanding its log integration support, including Filebeat, Vector, Loki, etc. If you can't find the integration you need temporarily, the active community can also help you add it.")),(0,a.yg)("p",null,'You can view specific integration methods and configuration examples through HertzBeat\'s "Log Integration" interface.'),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"log_integration",src:n(5027).A,width:"2878",height:"1468"})),(0,a.yg)("h2",{id:"opentelemetry-otlp-protocol-integration"},"OpenTelemetry OTLP Protocol Integration"),(0,a.yg)("h3",{id:"api-endpoints"},"API Endpoints"),(0,a.yg)("p",null,"HertzBeat provides the following interfaces for receiving OTLP log data:"),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Protocol-specific Interface"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-text"},"POST /api/logs/ingest/otlp\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Default Interface")," (automatically uses OTLP protocol):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-text"},"POST /api/logs/ingest\n")),(0,a.yg)("h3",{id:"request-configuration"},"Request Configuration"),(0,a.yg)("h4",{id:"request-headers"},"Request Headers"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Content-Type"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"application/json")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Authorization"),": ",(0,a.yg)("inlineCode",{parentName:"li"},"Bearer {token}"))),(0,a.yg)("h4",{id:"request-body-format"},"Request Body Format"),(0,a.yg)("p",null,"Support standard OTLP JSON format log data:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "resourceLogs": [\n    {\n      "resource": {\n        "attributes": [\n          {\n            "key": "service.name",\n            "value": {\n              "stringValue": "my-service"\n            }\n          },\n          {\n            "key": "service.version", \n            "value": {\n              "stringValue": "1.0.0"\n            }\n          }\n        ]\n      },\n      "scopeLogs": [\n        {\n          "scope": {\n            "name": "my-logger",\n            "version": "1.0.0"\n          },\n          "logRecords": [\n            {\n              "timeUnixNano": "1640995200000000000",\n              "severityNumber": 9,\n              "severityText": "INFO",\n              "body": {\n                "stringValue": "This is a log message"\n              },\n              "attributes": [\n                {\n                  "key": "user.id",\n                  "value": {\n                    "stringValue": "12345"\n                  }\n                }\n              ],\n              "traceId": "12345678901234567890123456789012",\n              "spanId": "1234567890123456"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n')),(0,a.yg)("h3",{id:"configuration-examples"},"Configuration Examples"),(0,a.yg)("h4",{id:"opentelemetry-collector-configuration"},"OpenTelemetry Collector Configuration"),(0,a.yg)("p",null,"Add HertzBeat as a log export target in the OpenTelemetry Collector configuration file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'exporters:\n  otlphttp:\n    logs_endpoint: http://{hertzbeat_host}:1157/api/logs/ingest/otlp\n    compression: none\n    encoding: json\n    headers:\n      Authorization: "Bearer {token}"\n\nservice:\n  pipelines:\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlphttp]\n')),(0,a.yg)("h3",{id:"log-data-format-description"},"Log Data Format Description"),(0,a.yg)("h4",{id:"core-fields"},"Core Fields"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"timeUnixNano"),": Log timestamp (nanosecond precision)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"severityNumber"),": Log level numeric value (1-24, corresponding to TRACE to FATAL)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"severityText"),': Log level text (such as "INFO", "ERROR", etc.)'),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"body"),": Log message content"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"attributes"),": Log attribute key-value pairs"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"traceId"),": Trace ID (optional)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"spanId"),": Span ID (optional)")),(0,a.yg)("h4",{id:"resource-attributes"},"Resource Attributes"),(0,a.yg)("p",null,"Application and environment information can be set through ",(0,a.yg)("inlineCode",{parentName:"p"},"resource.attributes"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"service.name"),": Service name"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"service.version"),": Service version"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"deployment.environment"),": Deployment environment (dev/test/prod)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"host.name"),": Host name")),(0,a.yg)("h3",{id:"configuration-verification"},"Configuration Verification"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Configure Log Sender"),": Configure external systems to send OTLP logs to HertzBeat specified interface"),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"View Received Logs"),": View received log data in HertzBeat real-time log module"),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("strong",{parentName:"li"},"Verify Data Integrity"),": Verify whether log data format, timestamp, attributes and other information are correct")),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"log_stream",src:n(6029).A,width:"2878",height:"1462"})),(0,a.yg)("h3",{id:"common-issues"},"Common Issues"),(0,a.yg)("h4",{id:"log-sending-failed"},"Log Sending Failed"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Network Connection Issues"),": Ensure HertzBeat service address can be accessed by external systems"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Request Header Error"),": Verify that request header Content-Type is set to ",(0,a.yg)("inlineCode",{parentName:"li"},"application/json"))),(0,a.yg)("h4",{id:"log-format-error"},"Log Format Error"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"OTLP Format"),": Ensure standard OTLP JSON format is sent"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Timestamp Format"),": Check if timestamp format is Unix timestamp with nanosecond precision"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Log Level"),": Verify severityNumber value range (1-24)"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Data Type"),": Ensure data types of each field comply with OTLP specification")),(0,a.yg)("h3",{id:"related-resources"},"Related Resources"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://opentelemetry.io/docs/specs/otel/logs/"},"OpenTelemetry Log Specification")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/configuration/"},"OpenTelemetry Collector Configuration Guide"))),(0,a.yg)("p",null,"For more log integration methods or technical issues, feel free to communicate with the community through ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/hertzbeat/issues"},"GitHub Issues"),"."))}u.isMDXComponent=!0},5027:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/log_integration_en-63bf58af948a529eec8fb5dcbce81732.png"},6029:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/log_stream_en-489a62f4128ac38abaa7da544619f111.png"}}]);